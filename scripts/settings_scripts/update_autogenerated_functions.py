from .config import (
    SRC_CODE_START_MARKER,
    SRC_CODE_END_MARKER,
    SettingsList,
    find_start_end_indexes,
    get_setting_heading,
)


def add_autogenerated_global_functions(setting):
    cpp_code = f"void {setting.struct_name}::SetGlobal(DatabaseInstance *db, DBConfig &config, const Value &input) {{\n"
    if setting.add_verification_in_SET:
        cpp_code += f"\tif (!VerifySet(db, config, input)) {{\n"
        cpp_code += f"\t\treturn;\n\t}}\n"
    cpp_code += f"\tconfig.options.{setting.name} = input.GetValue<{setting.type}>();\n"
    cpp_code += f"}}\n\n"
    cpp_code += f"void {setting.struct_name}::ResetGlobal(DatabaseInstance *db, DBConfig &config) {{\n"
    if setting.add_verification_in_RESET:
        cpp_code += f"\tif (!VerifyReset(db, config)) {{\n"
        cpp_code += f"\t\treturn;\n\t}}\n"
    cpp_code += f"\tconfig.options.{setting.name} = DBConfig().options.{setting.name};\n"
    cpp_code += f"}}\n\n"
    cpp_code += f"Value {setting.struct_name}::GetSetting(const ClientContext &context) {{\n"
    cpp_code += f"\tauto &config = DBConfig::GetConfig(context);\n"
    cpp_code += f"\treturn Value::CreateValue(config.options.{setting.name});\n"
    cpp_code += f"}}\n\n"
    return cpp_code


def add_autogenerated_local_functions(setting):
    cpp_code = f"void {setting.struct_name}::SetLocal(ClientContext &context, const Value &input) {{\n"
    if setting.add_verification_in_SET:
        cpp_code += f"\tif (!VerifySet(context, input)) {{\n"
        cpp_code += f"\t\treturn;\n\t}}\n"
    cpp_code += (
        f"\tauto &config = ClientConfig::GetConfig(context);\n"
        f"\tconfig.{setting.name} = input.GetValue<{setting.type}>();\n"
    )
    cpp_code += f"}}\n\n"
    cpp_code += f"void {setting.struct_name}::ResetLocal(ClientContext &context) {{\n"
    if setting.add_verification_in_RESET:
        cpp_code += f"\tif (!VerifyReset(context)) {{\n"
        cpp_code += f"\t\treturn;\n\t}}\n"
    cpp_code += f"\tClientConfig::GetConfig(context).{setting.name} = ClientConfig().{setting.name};\n"
    cpp_code += f"}}\n\n"
    cpp_code += f"Value {setting.struct_name}::GetSetting(const ClientContext &context) {{\n"
    cpp_code += f"\treturn Value::CreateValue(ClientConfig::GetConfig(context).{setting.name});\n"
    cpp_code += f"}}\n\n"
    return cpp_code


def add_autogenerated_functions(path):
    with open(path, 'r') as source_file:
        source_code = source_file.read()

    # find start and end indexes of the auto-generated section
    start_index, end_index = find_start_end_indexes(source_code, SRC_CODE_START_MARKER, SRC_CODE_END_MARKER, path)

    # split source code into sections
    start_section = source_code[: start_index + 1] + "\n"
    end_section = source_code[end_index:]

    new_content = ""
    added = 0
    for setting in SettingsList:
        # if the setting doesn't need custom implementation, an autogenerated one will be included
        if not setting.custom_value_conversion:
            new_content += get_setting_heading(setting.struct_name)
            if setting.scope == "GLOBAL" or setting.scope == "GLOBAL_LOCAL":
                new_content += add_autogenerated_global_functions(setting)
            if setting.scope == "LOCAL" or setting.scope == "GLOBAL_LOCAL":
                new_content += add_autogenerated_local_functions(setting)
            added += 1
    return start_section + new_content + end_section, added


if __name__ == '__main__':
    raise ValueError("Please use 'generate_settings.py' instead of running the individual script(s)")
