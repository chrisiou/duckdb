[
    {
        "name": "access_mode",
        "description": "Access mode of the database (AUTOMATIC, READ_ONLY or READ_WRITE)",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "allocator_background_threads",
        "description": "Whether to enable the allocator background thread.",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global",
        "verification": [
            "set",
            "reset"
        ]
    },
    {
        "name": "allocator_bulk_deallocation_flush_threshold",
        "description": "If a bulk deallocation larger than this occurs, flush outstanding allocations.",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "allocator_flush_threshold",
        "description": "Peak allocation threshold at which to flush the allocator after completing a task.",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "allow_community_extensions",
        "description": "Allow to load community built extensions",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global",
        "verification": [
            "set",
            "reset"
        ]
    },
    {
        "name": "allow_extensions_metadata_mismatch",
        "description": "Allow to load extensions with not compatible metadata",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global"
    },
    {
        "name": "allow_persistent_secrets",
        "description": "Allow the creation of persistent secrets, that are stored and loaded on restarts",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "allow_unredacted_secrets",
        "description": "Allow printing unredacted secrets",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global",
        "verification": [
            "set",
            "reset"
        ]
    },
    {
        "name": "allow_unsigned_extensions",
        "description": "Allow to load extensions with invalid or missing signatures",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global",
        "verification": [
            "set",
            "reset"
        ]
    },
    {
        "name": "arrow_large_buffer_size",
        "description": "If arrow buffers for strings, blobs, uuids and bits should be exported using large buffers",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "arrow_lossless_conversion",
        "description": "Whenever a DuckDB type does not have a clear native or canonical extension match in Arrow, export the types with a duckdb.type_name extension name.",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "arrow_output_list_view",
        "description": "If export to arrow format should use ListView as the physical layout for LIST columns",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "autoinstall_extension_repository",
        "description": "Overrides the custom endpoint for extension installation on autoloading",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "autoinstall_known_extensions",
        "description": "Whether known extensions are allowed to be automatically installed when a query depends on them",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global"
    },
    {
        "name": "autoload_known_extensions",
        "description": "Whether known extensions are allowed to be automatically loaded when a query depends on them",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global"
    },
    {
        "name": "catalog_error_max_schemas",
        "description": "The maximum number of schemas the system will scan for \\\"did you mean...\\\" style errors in the catalog",
        "return_type": "uint64_t",
        "sql_type": "UBIGINT",
        "scope": "global"
    },
    {
        "name": "checkpoint_threshold",
        "description": "The WAL size threshold at which to automatically trigger a checkpoint (e.g. 1GB)",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true,
        "aliases": [
            "wal_autocheckpoint"
        ]
    },
    {
        "name": "custom_extension_repository",
        "description": "Overrides the custom endpoint for remote extension installation",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "custom_profiling_settings",
        "description": "Accepts a JSON enabling custom metrics",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "custom_user_agent",
        "description": "Metadata from DuckDB callers",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "debug_asof_iejoin",
        "description": "DEBUG SETTING: force use of IEJoin to implement AsOf joins",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "debug_checkpoint_abort",
        "description": "DEBUG SETTING: trigger an abort while checkpointing for testing purposes",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "debug_force_external",
        "description": "DEBUG SETTING: force out-of-core computation for operators that support it, used for testing",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "debug_force_no_cross_product",
        "description": "DEBUG SETTING: Force disable cross product generation when hyper graph isn't connected, used for testing",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "debug_skip_checkpoint_on_commit",
        "description": "DEBUG SETTING: skip checkpointing on commit",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global"
    },
    {
        "name": "debug_window_mode",
        "description": "DEBUG SETTING: switch window mode to use",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "default_block_size",
        "description": "The default block size for new duckdb database files (new as-in, they do not yet exist).",
        "return_type": "uint64_t",
        "sql_type": "UBIGINT",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "default_collation",
        "description": "The collation setting used when none is specified",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global_local",
        "custom_implementation": true
    },
    {
        "name": "default_null_order",
        "description": "Null ordering used when none is specified (NULLS_FIRST or NULLS_LAST)",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true,
        "aliases": [
            "null_order"
        ]
    },
    {
        "name": "default_order",
        "description": "The order type used when none is specified (ASC or DESC)",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "default_secret_storage",
        "description": "Allows switching the default storage for secrets",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "disabled_filesystems",
        "description": "Disable specific file systems preventing access (e.g. LocalFileSystem)",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "disabled_optimizers",
        "description": "DEBUG SETTING: disable a specific set of optimizers (comma separated)",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "duckdb_api",
        "description": "DuckDB API surface",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "enable_external_access",
        "description": "Allow the database to access external state (through e.g. loading/installing modules, COPY TO/FROM, CSV \"\n\t    \"readers, pandas replacement scans, etc)",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global",
        "verification": [
            "set",
            "reset"
        ]
    },
    {
        "name": "enable_fsst_vectors",
        "description": "Allow scans on FSST compressed segments to emit compressed vectors to utilize late decompression",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global"
    },
    {
        "name": "enable_http_logging",
        "description": "Enables HTTP logging",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local"
    },
    {
        "name": "enable_http_metadata_cache",
        "description": "Whether or not the global http metadata is used to cache HTTP metadata",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "enable_macro_dependencies",
        "description": "Enable created MACROs to create dependencies on the referenced objects (such as tables)",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global"
    },
    {
        "name": "enable_object_cache",
        "description": "Whether or not object cache is used to cache e.g. Parquet metadata",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "enable_profiling",
        "description": "Enables profiling, and sets the output format (JSON, QUERY_TREE, QUERY_TREE_OPTIMIZER)",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "enable_progress_bar",
        "description": "Enables the progress bar, printing progress to the terminal for long queries",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local",
        "verification": [
            "set",
            "reset"
        ]
    },
    {
        "name": "enable_progress_bar_print",
        "description": "Controls the printing of the progress bar, when 'enable_progress_bar' is true",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "enable_view_dependencies",
        "description": "Enable created VIEWs to create dependencies on the referenced objects (such as tables)",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global"
    },
    {
        "name": "errors_as_json",
        "description": "Output error messages as structured JSON instead of as a raw string",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local"
    },
    {
        "name": "explain_output",
        "description": "Output of EXPLAIN statements (ALL, OPTIMIZED_ONLY, PHYSICAL_ONLY)",
        "return_type": "uint64_t",
        "sql_type": "VARCHAR",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "extension_directory",
        "description": "Set the directory to store extensions in",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "external_threads",
        "description": "The number of external threads that work on DuckDB tasks.",
        "return_type": "idx_t",
        "sql_type": "BIGINT",
        "scope": "global",
        "verification": [
            "set",
            "reset"
        ]
    },
    {
        "name": "file_search_path",
        "description": "A comma separated list of directories to search for input files",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "force_bitpacking_mode",
        "description": "DEBUG SETTING: forces a specific bitpacking mode",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "force_compression",
        "description": "DEBUG SETTING: forces a specific compression method to be used",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "home_directory",
        "description": "Sets the home directory used by the system",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "http_logging_output",
        "description": "The file to which HTTP logging output should be saved, or empty to print to the terminal",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "local"
    },
    {
        "name": "http_proxy",
        "description": "HTTP proxy host",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global"
    },
    {
        "name": "http_proxy_password",
        "description": "Password for HTTP proxy",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global"
    },
    {
        "name": "http_proxy_username",
        "description": "Username for HTTP proxy",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global"
    },
    {
        "name": "ieee_floating_point_ops",
        "description": "Use IEE754-compliant floating point operations (returning NAN instead of errors/NULL).",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local"
    },
    {
        "name": "immediate_transaction_mode",
        "description": "Whether transactions should be started lazily when needed, or immediately when BEGIN TRANSACTION is called",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global"
    },
    {
        "name": "index_scan_max_count",
        "description": "The maximum index scan count sets a threshold for index scans. If fewer than MAX(index_scan_max_count, \"\n\t    \"index_scan_percentage * total_row_count) rows match, we perform an index scan instead of a table scan.",
        "return_type": "uint64_t",
        "sql_type": "UBIGINT",
        "scope": "global"
    },
    {
        "name": "index_scan_percentage",
        "description": "The index scan percentage sets a threshold for index scans. If fewer than MAX(index_scan_max_count, \"\n\t    \"index_scan_percentage * total_row_count) rows match, we perform an index scan instead of a table scan.",
        "return_type": "double",
        "sql_type": "DOUBLE",
        "scope": "global",
        "verification": [
            "set"
        ]
    },
    {
        "name": "integer_division",
        "description": "Whether or not the / operator defaults to integer division, or to floating point division",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local"
    },
    {
        "name": "lock_configuration",
        "description": "Whether or not the configuration can be altered",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global"
    },
    {
        "name": "log_query_path",
        "description": "Specifies the path to which queries should be logged (default: NULL, queries are not logged)",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "max_expression_depth",
        "description": "The maximum expression depth limit in the parser. WARNING: increasing this setting and using very deep \"\n\t    \"expressions might lead to stack overflow errors.",
        "return_type": "uint64_t",
        "sql_type": "UBIGINT",
        "scope": "local"
    },
    {
        "name": "max_memory",
        "description": "The maximum memory of the system (e.g. 1GB)",
        "return_type": "idx_t",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true,
        "aliases": [
            "memory_limit"
        ]
    },
    {
        "name": "max_temp_directory_size",
        "description": "The maximum amount of data stored inside the 'temp_directory' (when set) (e.g. 1GB)",
        "return_type": "idx_t",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "max_vacuum_tasks",
        "description": "The maximum vacuum tasks to schedule during a checkpoint.",
        "return_type": "uint64_t",
        "sql_type": "UBIGINT",
        "scope": "global"
    },
    {
        "name": "merge_join_threshold",
        "description": "The number of rows we need on either table to choose a merge join",
        "return_type": "idx_t",
        "sql_type": "UBIGINT",
        "scope": "local"
    },
    {
        "name": "nested_loop_join_threshold",
        "description": "The number of rows we need on either table to choose a nested loop join",
        "return_type": "idx_t",
        "sql_type": "UBIGINT",
        "scope": "local"
    },
    {
        "name": "old_implicit_casting",
        "description": "Allow implicit casting to/from VARCHAR",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global"
    },
    {
        "name": "order_by_non_integer_literal",
        "description": "Allow ordering by non-integer literals - ordering by such literals has no effect.",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local"
    },
    {
        "name": "ordered_aggregate_threshold",
        "description": "The number of rows to accumulate before sorting, used for tuning",
        "return_type": "uint64_t",
        "sql_type": "UBIGINT",
        "scope": "local",
        "verification": [
            "set"
        ]
    },
    {
        "name": "partitioned_write_flush_threshold",
        "description": "The threshold in number of rows after which we flush a thread state when writing using PARTITION_BY",
        "return_type": "idx_t",
        "sql_type": "UBIGINT",
        "scope": "local"
    },
    {
        "name": "partitioned_write_max_open_files",
        "description": "The maximum amount of files the system can keep open before flushing to disk when writing using PARTITION_BY",
        "return_type": "idx_t",
        "sql_type": "UBIGINT",
        "scope": "local"
    },
    {
        "name": "password",
        "description": "The password to use. Ignored for legacy compatibility.",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "perfect_ht_threshold",
        "description": "Threshold in bytes for when to use a perfect hash table",
        "return_type": "idx_t",
        "sql_type": "BIGINT",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "pivot_filter_threshold",
        "description": "The threshold to switch from using filtered aggregates to LIST with a dedicated pivot operator",
        "return_type": "uint64_t",
        "sql_type": "BIGINT",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "pivot_limit",
        "description": "The maximum number of pivot columns in a pivot statement",
        "return_type": "uint64_t",
        "sql_type": "BIGINT",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "prefer_range_joins",
        "description": "Force use of range joins with mixed predicates",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local"
    },
    {
        "name": "preserve_identifier_case",
        "description": "Whether or not to preserve the identifier case, instead of always lowercasing all non-quoted identifiers",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local"
    },
    {
        "name": "preserve_insertion_order",
        "description": "Whether or not to preserve insertion order. If set to false the system is allowed to re-order any results \"\n\t    \"that do not contain ORDER BY clauses.",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global"
    },
    {
        "name": "produce_arrow_string_view",
        "description": "If strings should be produced by DuckDB in Utf8View format instead of Utf8",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "profile_output",
        "description": "The file to which profile output should be saved, or empty to print to the terminal",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "local",
        "custom_implementation": true,
        "aliases": [
            "profiling_output"
        ]
    },
    {
        "name": "profiling_mode",
        "description": "The profiling mode (STANDARD or DETAILED)",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "progress_bar_time",
        "description": "Sets the time (in milliseconds) how long a query needs to take before we start printing a progress bar",
        "return_type": "int32_t",
        "sql_type": "BIGINT",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "scalar_subquery_error_on_multiple_rows",
        "description": "When a scalar subquery returns multiple rows - return a random row instead of returning an error.",
        "return_type": "bool",
        "sql_type": "BOOLEAN",
        "scope": "local"
    },
    {
        "name": "schema",
        "description": "Sets the default search schema. Equivalent to setting search_path to a single value.",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "search_path",
        "description": "Sets the default catalog search path as a comma-separated list of values",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "secret_directory",
        "description": "Set the directory to which persistent secrets are stored",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "storage_compatibility_version",
        "description": "Serialize on checkpoint with compatibility for a given duckdb version",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "streaming_buffer_size",
        "description": "The maximum memory to buffer between fetching from a streaming result (e.g. 1GB)",
        "return_type": "idx_t",
        "sql_type": "VARCHAR",
        "scope": "local",
        "custom_implementation": true
    },
    {
        "name": "temp_directory",
        "description": "Set the directory to which to write temp files",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true
    },
    {
        "name": "threads",
        "description": "The number of total threads used by the system.",
        "return_type": "idx_t",
        "sql_type": "BIGINT",
        "scope": "global",
        "custom_implementation": true,
        "aliases": [
            "worker_threads"
        ]
    },
    {
        "name": "username",
        "description": "The username to use. Ignored for legacy compatibility.",
        "return_type": "string",
        "sql_type": "VARCHAR",
        "scope": "global",
        "custom_implementation": true,
        "aliases": [
            "user"
        ]
    }
]